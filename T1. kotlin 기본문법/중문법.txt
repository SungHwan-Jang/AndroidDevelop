import java.awt.Color

////////////////////////////////////////////// 추상메소드 //////////////////////////////////////////////////////
abstract class A{
    abstract fun func()
    fun func2(){
        println("Abstract Func2");
    }
}

class B:A(){
    override fun func(){
        println("OverRide!");
    }
}

val b = B();
b.func();
b.func2();

////////////////////////////////////////////// 인터페이스 //////////////////////////////////////////////////////
interface Runnable{
    fun Run();
    fun FastRun() = println("Fast Running");
}

interface Flyable{
    fun Fly();
    fun FastFly() = println("Fast Flying");
}

class Human : Runnable, Flyable{
    override fun Run(){
        println("Running");
    }

    override fun Fly() {
        println("Flying");
    }
}

var human = Human();
human.Run();
human.FastRun();
human.Fly();
human.FastFly()

////////////////////////////////////////////// nullable 변수 화 (Int, Double 등 안됨)//////////////////////////////////////////////////////
val a:String? = null;
println(a)

////////////////////////////////////////////// 늦은초기화 var //////////////////////////////////////////////////////
lateinit var lateInitString:String;
lateInitString = "Hello";
println(lateInitString)

////////////////////////////////////////////// 늦은초기화 val //////////////////////////////////////////////////////
val str:String by lazy {
    println("FirstTime")
    "lazyString"
}
println(str)
println(str)

////////////////////////////////////////////// null 보증 //////////////////////////////////////////////////////
val name:String? = "BigMan";
val name2 = name;
val name3 = name!!;

println(name2)
println(name3)

////////////////////////////////////////////// 안전한 메소드 호출 //////////////////////////////////////////////////////
val str2:String? = null;
var upperCase = if(str2 != null) str else null;
upperCase = str2?.toUpperCase();

println(upperCase);

////////////////////////////////////////////// 엘비스 연산자 ////////////////////////////////////////////////////////
upperCase = str2?.toUpperCase() ?: "Empty";

println(upperCase);

////////////////////////////////////////////// 컬렉션 //////////////////////////////////////////////////////
// 리스트든 셋트이든 맵이든 기본은 immutable 방식.
// 변경이 불가능하여 add가 동작하지 않는다. 다만 Mutable로 선언하면 변경가능. (failFoods 불가, foods 가능)
val failFoods: List<String> = mutableListOf("생강", "마늘", "커피"); // 형 추론 생성시 mutableListOf가 동작함.
// removeAt, add 함수 불가 plus 및 reduce 사용
val foods :MutableList<String> = mutableListOf("ramen", "milk", "salt"); //형 추론 생성 가능

foods.add("sushi");
foods.removeAt(0);
foods[1] = "coke";

println(foods);

////////////////////////////////////////////// 람다식 //////////////////////////////////////////////////////

fun add(x:Int, y:Int):Int{ //기본 메소드
    return x+y;
}

fun addCut(x:Int, y:Int) = x+y; //생략 메소드

var addRamda = {x:Int, y:Int -> x+y}; // 람다 메소드
// 메소드 명 = {인수, ... -> 동작 과정}
println(addRamda(10,20));

//확장 함수
fun Int.isEven() = this % 2 == 0; //해당 객체를 this 로 접근할 수 있다.

val fir = 5;
val sec = 4;

println(fir.isEven())
println(sec.isEven())

//////////////////////////////////////////// 형 변환 //////////////////////////////////////////////////////

val longVal = 10L;
val bb = 20;

val cc = longVal.toInt();
val dd = bb.toDouble();
val ee = cc.toString();

println("${cc} ${dd} ${ee} is.")

val intStr = "10"
val strTointVal = Integer.parseInt(intStr!!)

println(strTointVal+10)

open class School

class Student : School()

val somet = Student()
val somet2 = somet as School

////////////////////////////////////////////// 형 체크 //////////////////////////////////////////////////////

val strHello2 = "Hello"
if(strHello2 is String){
    println(strHello2.toUpperCase())
}

////////////////////////////////////////////// 고차함수 //////////////////////////////////////////////////////

//Higher Order Function
fun addIntPrint(x:Int, y:Int, callback: (sum:Int)->Unit){
    var res = x+y;
    callback(res)
} // parameter : x, y, func(int param and void func)

addIntPrint(5,4,{ println(it) })
// func는 {}로 감싸고 내부에서는 반환값을 it로 접근할 수 있음.

////////////////////////////////////////////// 동반 객체 //////////////////////////////////////////////////////
// 안드로이드 프래그먼트 컴포넌트를 다룰 때 자동으로 동반 객체 코드가 생성.
// 프래그먼트는 특수한 제약 때문에 팩토리 메서드를 정의하여 인스턴스를 생성해야 함.
// 팩토리 메서드는 생성자가 아닌 메서드를 사용해 객체를 생성하는 코딩 패턴. 클래스와 별개로 보며 포함관계도 아니다.
// 코틀린은 static과 같은 정적인 메서드를 만들 수 있는 키워드가 없으며 대신 동반객체(companion obj)로 이를 구현한다.

class Fragment{

//    companion object{
//        fun newInstance() : Fragment { //In book, no Companion -> Fragment
//            println("Created");
//        }
//    } // Original Source

//    companion object{
//        fun newInstance() : Companion { //In book, no Companion -> Fragment
//            println("Created");
//            return this
//        }
//    }

    companion object{ //companion obj의 메서드는 Fragment 클래스와 아무 관계가 없는 정적인 존재.
        fun newInstance() : Fragment { //In book, no Companion -> Fragment
            println("Created");
            return Fragment(); // Add this for avoiding Compile Error.
        }
    }

    fun textPrint():Unit{
        println("This is Fragment Obj")
    }
}

val fragment = Fragment.newInstance();
fragment.textPrint()


////////////////////////////////////////////// let() //////////////////////////////////////////////////////
//블록에 자기 자신을 인수로 전달하고 수행된 결과를 반환

// fun <T, R> T.let(block: (T) -> R) : R

val result = str?.let{
    Integer.parseInt(it)
}

// str이 null이 아닐 때만 정수로 변경하여 출력하는 코드. 복잡한 if문을 대체 할 수 있다.

////////////////////////////////////////////// with() //////////////////////////////////////////////////////
// 인수로 객체를 받고 블록에 리시버 객체로 전달. 그리고 수행된 결과를 반환한다. 리시버 객체로 전달된 객체는 this로 접근 가능 또한 this는 생략이 가능하다.

// fun <T, R> with(receiver : T, block T.() -> R) : R

with(str){
    println(this.toUpperCase())
}

// 안전한 호출이 불가능하여 str이 null값이 아닌 경우에만 사용해야 한다.

////////////////////////////////////////////// apply() //////////////////////////////////////////////////////
// 블록에 객체 자신이 리시버 객체로 전달되고 이 객체가 반환. 객체의 상태를 변화시키고 그 객체를 다시 반환할때 주로 사용

// fun <T> T.apply(block T.() -> Unit) : T

val ress = car?.apply{
    car.setColor(Color.RED)
    car.setPrice(1000)
}

////////////////////////////////////////////// run() //////////////////////////////////////////////////////
// 익명 함수처럼 사용하는 방법과 객체에서 호출하는 방법 2개 가능.
// 익명 함수 사용시 -> 블록의 결과를 반환, 블록 안 변수는 모두 임시 변수 (복잡한 계산에 임시 변수 많이 필요할 때)

// fun <R> run(block: () -> R) : R
val avg = run{
    val korean = 100
    val english = 80
    val math = 50

    (korean + english + math) / 3.0
} //delegate 느낌이네..

// 객체 호출 사용시 -> 객체를 블록의 리시버 객체로 전달하고 블록의 결과를 반환 (안전한 호출 사용가능 하여 with()보다 유용)
// fun <T, R> T.run(block: T.() -> R) : R

str?.run{
    println(this.toUpperCase())
}
// with 함수는 사용하지 않는 걸로 하자...



